package com.raaivan.modules.users;

import com.raaivan.util.dbutil.RVConnection;
import com.raaivan.util.dbutil.RVStructuredParam;
import com.raaivan.modules.rv.enums.Messages;
import com.raaivan.modules.users.beans.*;
import com.raaivan.modules.users.enums.*;
import com.raaivan.modules.users.util.UserUtilities;
import com.raaivan.util.RVJSON;
import com.raaivan.util.PublicMethods;
import io.micrometer.core.instrument.util.StringUtils;
import org.apache.commons.lang3.mutable.MutableLong;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.context.annotation.ApplicationScope;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@ApplicationScope
public class UsersDAO {
    private RVConnection rvConnection;
    private UsersParsers parser;
    private PublicMethods publicMethods;
    private UserUtilities userUtilities;

    @Autowired
    public void _setDependencies(RVConnection rvConnection, UsersParsers parser,
                                 PublicMethods publicMethods, UserUtilities userUtilities) {
        if (this.rvConnection == null) this.rvConnection = rvConnection;
        if (this.parser == null) this.parser = parser;
        if (this.publicMethods == null) this.publicMethods = publicMethods;
        if (this.userUtilities == null) this.userUtilities = userUtilities;
    }

    private String getQualifiedName(String name){
        return "[dbo].[USR_" + name + "]";
    }

    public List<Password> getLastPasswords(UUID applicationId, UUID userId, Boolean autoGenerated, Integer count)
    {
        return parser.lastPasswords(rvConnection.read(getQualifiedName("GetLastPasswords"),
                applicationId, userId, autoGenerated, count));
    }

    public DateTime getLastPasswordDate(UUID applicationId, UUID userId)
    {
        return rvConnection.getDate(getQualifiedName("GetLastPasswordDate"), applicationId, userId);
    }

    private void _getCurrentPassword(UUID applicationId, UUID userId, String username,
                                          StringBuilder password, StringBuilder passwordSalt)
    {
        parser.password(rvConnection.read(getQualifiedName("GetCurrentPassword"),
                applicationId, userId, username), password, passwordSalt);
    }

    public void getCurrentPassword(UUID applicationId, String username,
                                     StringBuilder password, StringBuilder passwordSalt)
    {
        _getCurrentPassword(applicationId, null, username, password, passwordSalt);
    }

    public void getCurrentPassword(UUID applicationId, UUID userId,
                                   StringBuilder password, StringBuilder passwordSalt)
    {
        _getCurrentPassword(applicationId, userId, null, password, passwordSalt);
    }

    public boolean createUser(UUID applicationId, User info, boolean passAutoGenerated)
    {
        if (StringUtils.isBlank((info.getUserName()))) return false;

        if (info.getUserID() == null) info.setUserID(UUID.randomUUID());

        if (StringUtils.isBlank(info.getPassword()))
        {
            info.setPassword(info.getUserName());
            while (info.getPassword().length() < 5)
                info.setPassword(info.getPassword() + info.getUserName());

            passAutoGenerated = true;
        }

        info.setPasswordSalt(userUtilities.generatePasswordSalt());

        String saltedPassword = userUtilities.encodePassword(info.getPassword(), info.getPasswordSalt());

        return rvConnection.succeed(getQualifiedName("CreateUser"), applicationId, info.getUserID(),
                info.getUserName(), info.getFirstName(), info.getLastName(), saltedPassword,
                info.getPasswordSalt(), publicMethods.sha1(info.getPassword()), passAutoGenerated, "",
                publicMethods.now());
    }

    public boolean createTemporaryUser(UUID applicationId, User info, boolean passwordAutoGenerated,
                                       String confirmationEmailBody, DateTime expirationDate, String activationCode,
                                       UUID invitationId, StringBuilder errorMessage)
    {
        if (StringUtils.isBlank(info.getUserName()) || StringUtils.isBlank(confirmationEmailBody)) return false;

        String email = info.getEmails().size() == 0 ? "" : info.getEmails().get(0).getEmailAddress();
        if (StringUtils.isBlank(email)) return false;

        if (StringUtils.isBlank(info.getPasswordSalt()) || StringUtils.isBlank(info.getPassword()))
        {
            info.setPasswordSalt(userUtilities.generatePasswordSalt());
            info.setPassword(userUtilities.generatePassword());
            info.setSaltedPassword(userUtilities.encodePassword(info.getPassword(), info.getPasswordSalt()));

            passwordAutoGenerated = true;
        }

        boolean result = rvConnection.succeed(errorMessage, getQualifiedName("CreateTemporaryUser"), applicationId,
                info.getUserID(), info.getUserName(), info.getFirstName(), info.getLastName(),
                info.getSaltedPassword(), info.getPasswordSalt(), publicMethods.sha1(info.getPassword()),
                passwordAutoGenerated, email, publicMethods.now(), expirationDate, activationCode, invitationId);


        if(result && !publicMethods.sendEmail(applicationId, email, confirmationEmailBody)){
            //rollback temporary user
            return false;
        }

        return result;
    }

    public boolean activateTemporaryUser(UUID applicationId, String activationCode, StringBuilder errorMessage)
    {
        return rvConnection.succeed(errorMessage, getQualifiedName("ActivateTemporaryUser"),
                applicationId, activationCode, publicMethods.now());
    }

    public boolean ssInvited(UUID applicationId, String email)
    {
        return rvConnection.succeed(getQualifiedName("IsInvited"), applicationId, email);
    }

    public boolean inviteUser(UUID applicationId, UUID invitationId, String email,
                              UUID currentUserId, String emailSubject, String emailBody)
    {
        if(StringUtils.isBlank(email)) return false;

        boolean result = rvConnection.succeed(getQualifiedName("InviteUser"),
                applicationId, invitationId, email, currentUserId, publicMethods.now());

        if(result && !publicMethods.sendEmail(applicationId, email, emailSubject, emailBody)){
            //rollback invitation
            return false;
        }

        return result;
    }

    public int getInvitedUsersCount(UUID applicationId, UUID invitorUserId)
    {
        return rvConnection.getInt(getQualifiedName("GetInvitedUsersCount"), applicationId, invitorUserId);
    }

    public List<Invitation> getUserInvitations(UUID applicationId, UUID senderUserId, Integer count,
                                               Long lowerBoundary, MutableLong totalCount)
    {
        return parser.invitations(rvConnection.read(getQualifiedName("GetUserInvitations"),
                applicationId, senderUserId, count, lowerBoundary), totalCount);
    }

    public boolean setPasswordResetTicket(UUID applicationId, UUID userId, UUID ticket,
                                      String email, String emailBody, boolean sendEmail)
    {
        if(sendEmail && StringUtils.isBlank(email)) return false;

        boolean result = rvConnection.succeed(getQualifiedName("SetPassResetTicket"), applicationId, userId, ticket);

        if(result && sendEmail && !publicMethods.sendEmail(applicationId, email, emailBody)){
            //rollback ticket
            return false;
        }

        return result;
    }

    public boolean setPasswordResetTicket(UUID applicationId, UUID userId, UUID ticket, String email, String emailBody)
    {
        return setPasswordResetTicket(applicationId, userId, ticket, email, emailBody, true);
    }

    public boolean setPasswordResetTicket(UUID applicationId, String username,
                                          UUID ticket, String email, String emailBody, boolean sendEmail)
    {
        UUID userId = getUserID(applicationId, username);
        return userId != null && setPasswordResetTicket(applicationId, userId, ticket, email, emailBody, sendEmail);
    }

    public boolean setPasswordResetTicket(UUID applicationId, String username,
                                          UUID ticket, String email, String emailBody)
    {
        return setPasswordResetTicket(applicationId, username, ticket, email, emailBody, true);
    }

    public UUID getPasswordResetTicket(UUID applicationId, UUID userId)
    {
        return rvConnection.getUUID(getQualifiedName("GetPassResetTicket"), applicationId, userId);
    }

    public UUID getPasswordResetTicket(UUID applicationId, String username)
    {
        UUID userId = getUserID(applicationId, username);
        return userId == null ? null : getPasswordResetTicket(applicationId, userId);
    }

    public int getUsersCount(UUID applicationId, DateTime creationDateFrom, DateTime creationDateTo)
    {
        return rvConnection.getInt(getQualifiedName("GetUsersCount"),
                applicationId, creationDateFrom, creationDateTo);
    }

    public int getUsersCount(UUID applicationId)
    {
        return getUsersCount(applicationId, null, null);
    }

    public List<UUID> getUserIDs(UUID applicationId, List<String> usernames)
    {
        RVStructuredParam usernamesDT = new RVStructuredParam("StringTableType")
                .addColumnMetaData("Value", String.class);
        usernames.forEach(usernamesDT::addRow);

        return rvConnection.getUUIDList(getQualifiedName("GetUserIDs"), applicationId, usernamesDT);
    }

    public UUID getUserID(UUID applicationId, String username) {
        List<String> lst = new ArrayList<String>() {{
            add(username);
        }};

        List<UUID> ids = getUserIDs(applicationId, lst);

        return ids.size() == 0 ? null : ids.get(0);
    }

    public List<User> getUsers(UUID applicationId, String searchText, Long lowerBoundary, Integer count,
                               Boolean searchAll, Boolean isOnline, MutableLong totalCount)
    {
        return parser.users(rvConnection.read(getQualifiedName("GetUsers"),
                applicationId, rvConnection.getSearchText(searchText), lowerBoundary, count,
                searchAll, isOnline, publicMethods.now()), totalCount);
    }

    public List<User> getUsers(UUID applicationId, String searchText)
    {
        MutableLong totalCount = new MutableLong(0);
        return getUsers(applicationId, searchText, null, null, null, null, totalCount);
    }

    public List<User> getUsers(UUID applicationId, List<UUID> userIds)
    {
        return parser.users(rvConnection.read(getQualifiedName("GetUsersByIDs"), applicationId,
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ','));
    }

    public User getUser(UUID applicationId, UUID userId) {
        List<UUID> lst = new ArrayList<UUID>() {{
            add(userId);
        }};

        List<User> ret = getUsers(applicationId, lst);

        return ret.size() == 0 ? null : ret.get(0);
    }

    public List<AdvancedUserSearch> advancedUserSearch(UUID applicationId, String searchText,
                                                       List<UUID> nodeTypeIds, List<UUID> nodeIds, Boolean members,
                                                       Boolean experts, Boolean contributors, Boolean propertyOwners,
                                                       Boolean resume, Long lowerBoundary, Integer count,
                                                       MutableLong totalCount)
    {
        return parser.advancedUserSearch(rvConnection.read(getQualifiedName("AdvancedUserSearch"),
                applicationId, searchText, rvConnection.getSearchText(searchText, false),
                nodeTypeIds.stream().map(UUID::toString).collect(Collectors.joining(",")),
                nodeIds.stream().map(UUID::toString).collect(Collectors.joining(",")),
                ',', members, experts, contributors, propertyOwners, resume, lowerBoundary, count), totalCount);
    }

    public List<AdvancedUserSearchMeta> advancedUserSearchMeta(UUID applicationId, UUID userId, String searchText,
                                                               List<UUID> nodeTypeIds, List<UUID> nodeIds,
                                                               Boolean members, Boolean experts,
                                                               Boolean contributors, Boolean propertyOwners)
    {
        return parser.advancedUserSearchMeta(rvConnection.read(getQualifiedName("AdvancedUserSearchMeta"),
                applicationId, userId, rvConnection.getSearchText(searchText, false),
                nodeTypeIds.stream().map(UUID::toString).collect(Collectors.joining(",")),
                nodeIds.stream().map(UUID::toString).collect(Collectors.joining(",")),
                ',', members, experts, contributors, propertyOwners));
    }

    public User getSystemUser(UUID applicationId)
    {
        List<User> lst = parser.users(rvConnection.read(getQualifiedName("GetSystemUser"),
                applicationId), true);
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public boolean createAdminUser(UUID applicationId)
    {
        return rvConnection.succeed(getQualifiedName("CreateAdminUser"), applicationId);
    }

    public List<String> getNotExistingUsers(UUID applicationId, List<String> usernames)
    {
        RVStructuredParam usernamesDT = new RVStructuredParam("StringTableType")
                .addColumnMetaData("Value", String.class);
        usernames.forEach(usernamesDT::addRow);

        return rvConnection.getStringList(getQualifiedName("GetEmailContactsStatus"), applicationId, usernamesDT);
    }

    public boolean registerItemVisit(UUID applicationId, UUID itemId,
                                     UUID userId, DateTime visitDate, VisitItemTypes itemType)
    {
        if(itemType == VisitItemTypes.None) return false;

        return rvConnection.succeed(getQualifiedName("RegisterItemVisit"), applicationId,
                itemId, userId, publicMethods.now(), itemType.toString());
    }

    public boolean sendFriendshipRequest(UUID applicationId, UUID userId, UUID receiverUserId)
    {
        return rvConnection.succeed(getQualifiedName("SendFriendshipRequest"),
                applicationId, userId, receiverUserId, publicMethods.now());
    }

    public boolean acceptFriendship(UUID applicationId, UUID userId, UUID senderUserId)
    {
        return rvConnection.succeed(getQualifiedName("AcceptFriendship"),
                applicationId, userId, senderUserId, publicMethods.now());
    }

    public boolean rejectFriendship(UUID applicationId, UUID userId, UUID friendUserId)
    {
        return rvConnection.succeed(getQualifiedName("RejectFriendship"), applicationId, userId, friendUserId);
    }

    public List<Friend> getFriendshipStatus(UUID applicationId,
                                            UUID userId, List<UUID> otherUserIds, Boolean mutualsCount)
    {
        return parser.friendshipStatuses(rvConnection.read(getQualifiedName("GetFriendshipStatus"),
                applicationId, userId,
                otherUserIds.stream().map(UUID::toString).collect(Collectors.joining(",")),
                ',', mutualsCount));
    }

    public List<Friend> getFriendshipStatus(UUID applicationId, UUID userId, List<UUID> otherUserIds)
    {
        return getFriendshipStatus(applicationId, userId, otherUserIds, false);
    }

    public Friend getFriendshipStatus(UUID applicationId, UUID userId, UUID otherUserId, Boolean mutualsCount) {
        List<UUID> ids = new ArrayList<UUID>() {{
            add(otherUserId);
        }};

        List<Friend> ret = getFriendshipStatus(applicationId, userId, ids, mutualsCount);

        return ret.size() == 0 ? null : ret.get(0);
    }

    public Friend getFriendshipStatus(UUID applicationId, UUID userId, UUID otherUserId) {
        return getFriendshipStatus(applicationId, userId, otherUserId, false);
    }

    public List<UUID> getFriendIDs(UUID applicationId, UUID userId, Boolean areFriends, Boolean sent, Boolean received)
    {
        return rvConnection.getUUIDList(getQualifiedName("GetFriendIDs"), applicationId, userId, areFriends, sent, received);
    }

    public List<UUID> getFriendIDs(UUID applicationId, UUID userId)
    {
        return getFriendIDs(applicationId, userId, null, null, null);
    }

    public List<Friend> getFriends(UUID applicationId, UUID userId, List<UUID> friendIds, Boolean mutualsCount,
                                   Boolean areFriends, Boolean isSender, String searchText,
                                   Integer count, Long lowerBoundary, MutableLong totalCount)
    {
        return parser.friends(rvConnection.read(getQualifiedName("GetFriends"),
                applicationId, userId,
                friendIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ',',
                mutualsCount, areFriends, isSender, rvConnection.getSearchText(searchText), count, lowerBoundary), totalCount);
    }

    public List<Friend> getFriends(UUID applicationId, UUID userId, List<UUID> friendIds, Boolean mutualsCount,
                                   Integer count, Long lowerBoundary, MutableLong totalCount)
    {
        return getFriends(applicationId, userId, friendIds, mutualsCount,
                null, null, null, count, lowerBoundary, totalCount);
    }

    public List<Friend> getFriends(UUID applicationId, UUID userId, Boolean mutualsCount,
                                   Boolean areFriends, Boolean isSender, String searchText,
                                   Integer count, Long lowerBoundary, MutableLong totalCount)
    {
        return getFriends(applicationId, userId, new ArrayList<>(), mutualsCount, areFriends,
                isSender, searchText, count, lowerBoundary, totalCount);
    }

    public List<Friend> getFriends(UUID applicationId, UUID userId, Boolean mutualsCount,
                                   Integer count, Long lowerBoundary, MutableLong totalCount)
    {
        return getFriends(applicationId, userId, new ArrayList<>(), mutualsCount,
                null, null, null, count, lowerBoundary, totalCount);
    }

    public boolean updateFriendSuggestions(UUID applicationId, UUID userId)
    {
        return rvConnection.succeed(getQualifiedName("UpdateFriendSuggestions"), applicationId, userId);
    }

    public boolean updateFriendSuggestions(UUID applicationId)
    {
        return updateFriendSuggestions(applicationId, null);
    }

    public List<FriendSuggestion> getFriendSuggestions(UUID applicationId, UUID userId,
                                                       Integer count, Long lowerBoundary, MutableLong totalCount)
    {
        return parser.friendSuggestions(rvConnection.read(getQualifiedName("GetFriendSuggestions"),
                applicationId, userId, count, lowerBoundary), totalCount);
    }

    public int getFriendsCount(UUID applicationId, UUID userId, Boolean areFriends, Boolean sent, Boolean received)
    {
        return rvConnection.getInt(getQualifiedName("GetFriendsCount"),
                applicationId, userId, areFriends, sent, received);
    }

    public int getFriendsCount(UUID applicationId, UUID userId)
    {
        return getFriendsCount(applicationId, userId, null, null, null);
    }

    public List<EmailContactStatus> getEmailContactsStatus(UUID applicationId,
                                                           UUID userId, List<String> emails, Boolean saveEmails)
    {
        RVStructuredParam emailsDT = new RVStructuredParam("StringTableType")
                .addColumnMetaData("Value", String.class);
        emails.forEach(emailsDT::addRow);

        return parser.emailContactsStatus(rvConnection.read(getQualifiedName("GetEmailContactsStatus"),
                applicationId, userId, emailsDT, saveEmails, publicMethods.now()));
    }

    public List<EmailContactStatus> getEmailContactsStatus(UUID applicationId, UUID userId, List<String> emails)
    {
        return getEmailContactsStatus(applicationId, userId, emails, null);
    }

    public boolean setTheme(UUID applicationId, UUID userId, String theme)
    {
        return rvConnection.succeed(getQualifiedName("SetTheme"), applicationId, userId, theme);
    }

    public String getTheme(UUID applicationId, UUID userId)
    {
        return rvConnection.getString(getQualifiedName("GetTheme"), applicationId, userId);
    }

    public List<UUID> getApprovedUserIDs(UUID applicationId, List<UUID> userIds)
    {
        return rvConnection.getUUIDList(getQualifiedName("GetApprovedUserIDs"),
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ',');
    }

    public boolean setLastActivityDate(UUID applicationId, UUID userId)
    {
        return rvConnection.succeed(getQualifiedName("SetLastActivityDate"), applicationId, userId, publicMethods.now());
    }

    /* Profile */

    public boolean setFirstAndLastName(UUID applicationId, UUID userId, String firstName, String lastName)
    {
        return rvConnection.succeed(getQualifiedName("SetFirstAndLastName"), applicationId, userId, firstName, lastName);
    }

    public boolean setUserName(UUID applicationId, UUID userId, String username)
    {
        return rvConnection.succeed(getQualifiedName("SetUserName"), applicationId, userId, username);
    }

    private boolean _setPassword(UUID applicationId, UUID userId, String username, String password,
                                 boolean ignorePasswordPolicy, boolean autoGenerated, RVJSON error){
        if (!ignorePasswordPolicy &&
                !userUtilities.checkPasswordPolicy(applicationId, password, null, error)) return false;

        Password pass = new Password(password);

        return rvConnection.succeed(getQualifiedName("SetPassword"), applicationId, userId, username,
                pass.getSalted(), pass.getSalt(), pass.getEncrypted(), autoGenerated, publicMethods.now());
    }

    public boolean setPassword(UUID applicationId, UUID userId, UUID ticket,
                                    String password, boolean ignorePasswordPolicy, boolean autoGenerated, RVJSON error)
    {
        if (!ignorePasswordPolicy && !userUtilities.checkPasswordPolicy(applicationId, password, null, error)) return false;

        if (ticket == null || ticket != getPasswordResetTicket(applicationId, userId))
        {
            error.add("ErrorMessage", Messages.PasswordResetTicketIsNotValid.toString());
            return false;
        }

        return setPassword(applicationId, userId, password, ignorePasswordPolicy, autoGenerated, error);
    }

    public boolean setPassword(UUID applicationId, UUID userId, String password,
                                    boolean ignorePasswordPolicy, boolean autoGenerated, RVJSON error)
    {
        return _setPassword(applicationId, userId, null, password, ignorePasswordPolicy, autoGenerated, error);
    }

    public boolean setPassword(UUID applicationId, String username, String password,
                                    boolean ignorePasswordPolicy, boolean autoGenerated, RVJSON error)
    {
        return _setPassword(applicationId, null, username, password, ignorePasswordPolicy, autoGenerated, error);
    }

    private User _locked(UUID applicationId, UUID userId, String username, Boolean locked)
    {
        return parser.lockoutDate(rvConnection.read(getQualifiedName("Locked"),
                applicationId, userId, username, locked, publicMethods.now()));
    }


    public User lockUser(UUID applicationId, UUID userId)
    {
        return _locked(applicationId, userId, null, true);
    }

    public User lockUser(UUID applicationId, String username)
    {
        return _locked(applicationId, null, username, true);
    }

    public User unlockUser(UUID applicationId, UUID userId)
    {
        return _locked(applicationId, userId, null, false);
    }

    public User unlockUser(UUID applicationId, String username)
    {
        return _locked(applicationId, null, username, false);
    }

    public User locked(UUID applicationId, UUID userId)
    {
        return _locked(applicationId, userId, null, null);
    }

    public User locked(UUID applicationId, String username)
    {
        return _locked(applicationId, null, username, null);
    }

    private int _loginAttempt(UUID applicationId, UUID userId, String username, boolean succeed)
    {
        return rvConnection.getInt(getQualifiedName("LoginAttempt"), applicationId, userId, username, succeed);
    }

    public int loginAttempt(UUID applicationId, UUID userId, boolean succeed)
    {
        return _loginAttempt(applicationId, userId, null, succeed);
    }

    public int loginAttempt(UUID applicationId, String username, boolean succeed)
    {
        return _loginAttempt(applicationId, null, username, succeed);
    }

    public boolean isApproved(UUID applicationId, UUID userId, Boolean isApproved)
    {
        return rvConnection.succeed(getQualifiedName("IsApproved"), applicationId, userId, isApproved);
    }

    public boolean isApproved(UUID applicationId, UUID userId)
    {
        return isApproved(applicationId, userId, null);
    }

    public boolean setJobTitle(UUID applicationId, UUID userId, String jobTitle)
    {
        return rvConnection.succeed(getQualifiedName("SetJobTitle"), applicationId, userId, jobTitle);
    }

    public boolean setBirthday(UUID applicationId, UUID userId, DateTime birthday)
    {
        return rvConnection.succeed(getQualifiedName("SetBirthday"), applicationId, userId, birthday);
    }

    public boolean setPhoneNumber(UUID applicationId, UUID numberId, UUID userId, String phoneNumber,
                                  PhoneType phoneNumberType, UUID currentUserId)
    {
        if(phoneNumberType == PhoneType.NotSet) return false;

        return rvConnection.succeed(getQualifiedName("SetPhoneNumber"), applicationId, numberId, userId,
                phoneNumber, phoneNumberType.toString(), currentUserId, publicMethods.now());
    }

    public boolean editPhoneNumber(UUID applicationId,
                                   UUID numberId, String phoneNumber, PhoneType phoneType, UUID currentUserId)
    {
        if(phoneType == PhoneType.NotSet) return false;

        return rvConnection.succeed(getQualifiedName("EditPhoneNumber"), applicationId, numberId,
                phoneNumber, phoneType.toString(), currentUserId, publicMethods.now());
    }

    public boolean removePhoneNumber(UUID applicationId, UUID numberId, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("RemovePhoneNumber"),
                applicationId, numberId, currentUserId, publicMethods.now());
    }

    public boolean setMainPhone(UUID applicationId, UUID numberId, UUID userId)
    {
        return rvConnection.succeed(getQualifiedName("SetMainPhone"), applicationId, numberId, userId);
    }

    public boolean setEmailAddress(UUID applicationId, UUID emailId, UUID userId, String address, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("SetEmailAddress"),
                applicationId, emailId, userId, address, currentUserId, publicMethods.now());
    }

    public boolean editEmailAddress(UUID applicationId, UUID emailId, String address, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("EditEmailAddress"),
                applicationId, emailId, address, currentUserId, publicMethods.now());
    }

    public boolean removeEmailAddress(UUID applicationId, UUID emailId, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveEmailAddress"),
                applicationId, emailId, currentUserId, publicMethods.now());
    }

    public boolean setMainEmail(UUID applicationId, UUID emailId, UUID userId)
    {
        return rvConnection.succeed(getQualifiedName("SetMainEmail"), applicationId, emailId, userId);
    }

    public List<PhoneNumber> getPhoneNumbers(UUID applicationId, UUID userId)
    {
        return parser.phoneNumbers(rvConnection.read(getQualifiedName("GetPhoneNumbers"), applicationId, userId));
    }

    public PhoneNumber getPhoneNumber(UUID applicationId, UUID numberId)
    {
        List<PhoneNumber> lst = parser.phoneNumbers(rvConnection.read(getQualifiedName("GetPhoneNumber"),
                applicationId, numberId));
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public UUID getMainPhone(UUID applicationId, UUID userId)
    {
        return rvConnection.getUUID(getQualifiedName("GetMainPhone"), applicationId, userId);
    }

    public List<EmailAddress> getEmailAddresses(UUID applicationId, UUID userId)
    {
        return parser.emailAddresses(rvConnection.read(getQualifiedName("GetEmailAddresses"), applicationId, userId));
    }

    public EmailAddress getEmailAddress(UUID applicationId, UUID emailId)
    {
        List<EmailAddress> lst = parser.emailAddresses(rvConnection.read(getQualifiedName("GetEmailAddress"),
                applicationId, emailId));
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public List<String> getNotExistingEmails(UUID applicationId, List<String> emails)
    {
        RVStructuredParam emailsDT = new RVStructuredParam("StringTableType")
                .addColumnMetaData("Value", String.class);
        emails.forEach(emailsDT::addRow);

        return rvConnection.getStringList(getQualifiedName("GetNotExistingEmails"), applicationId, emailsDT);
    }

    public List<EmailAddress> getEmailOwners(UUID applicationId, List<String> emails)
    {
        return parser.emailAddresses(rvConnection.read(getQualifiedName("GetEmailOwners"),
                applicationId, String.join(",", emails), ','));
    }

    public UUID getEmailOwnerID(UUID applicationId, String email) {
        List<String> emails = new ArrayList<String>() {{
            add(email);
        }};

        List<EmailAddress> lst = parser.emailAddresses(rvConnection.read(getQualifiedName("GetEmailOwners"),
                applicationId, String.join(",", emails), ','));

        return lst.size() == 0 ? null : lst.get(0).getEmailID();
    }

    public UUID getMainEmail(UUID applicationId, UUID userId)
    {
        return rvConnection.getUUID(getQualifiedName("GetMainEmail"), applicationId, userId);
    }

    public List<PhoneNumber> getUsersMainPhone(UUID applicationId, List<UUID> userIds)
    {
        return parser.phoneNumbers(rvConnection.read(getQualifiedName("GetUsersMainPhone"),applicationId,
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ','));
    }

    public List<EmailAddress> getUsersMainEmail(UUID applicationId, List<UUID> userIds)
    {
        return parser.emailAddresses(rvConnection.read(getQualifiedName("GetUsersMainEmail"), applicationId,
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ','));
    }

    public List<JobExperience> getJobExperiences(UUID applicationId, UUID userId)
    {
        return parser.jobExperiences(rvConnection.read(getQualifiedName("GetJobExperiences"), applicationId, userId));
    }

    public JobExperience getJobExperience(UUID applicationId, UUID id)
    {
        List<JobExperience> lst = parser.jobExperiences(rvConnection.read(getQualifiedName("GetJobExperience"),
                applicationId, id));
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public List<EducationalExperience> getEducationalExperiences(UUID applicationId, UUID userId)
    {
        return parser.educationalExperiences(rvConnection.read(getQualifiedName("GetEducationalExperiences"),
                applicationId, userId));
    }

    public EducationalExperience getEducationalExperience(UUID applicationId, UUID id)
    {
        List<EducationalExperience> lst = parser.educationalExperiences(
                rvConnection.read(getQualifiedName("GetEducationalExperience"), applicationId, id));
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public List<HonorsAndAwards> getHonorsAndAwards(UUID applicationId, UUID userId)
    {
        return parser.honorsAndAwards(rvConnection.read(getQualifiedName("GetHonorsAndAwards"), applicationId, userId));
    }

    public HonorsAndAwards getHonorOrAward(UUID applicationId, UUID id)
    {
        List<HonorsAndAwards> lst = parser.honorsAndAwards(rvConnection.read(getQualifiedName("GetHonorOrAward"),
                applicationId, id));
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public List<Language> getUserLanguages(UUID applicationId, UUID userId)
    {
        return parser.languages(rvConnection.read(getQualifiedName("GetUserLanguages"),
                applicationId, userId), true);
    }

    public Language getUserLanguage(UUID applicationId, UUID id)
    {
        List<Language> lst = parser.languages(rvConnection.read(getQualifiedName("GetUserLanguage"),
                applicationId, id), true);
        return lst.size() > 0 ? lst.get(0) : null;
    }

    public List<Language> getLanguages(UUID applicationId, List<UUID> langIds)
    {
        String strLangIds = null;
        if(langIds != null && langIds.size() > 0)
            strLangIds = langIds.stream().map(UUID::toString).collect(Collectors.joining(","));

        return parser.languages(rvConnection.read(getQualifiedName("GetLanguages"), applicationId,
                strLangIds, ','), false);
    }

    public List<Language> getLanguages(UUID applicationId)
    {
        return getLanguages(applicationId, null);
    }

    public boolean setJobExperience(UUID applicationId, UUID jobId, UUID userId, UUID currentUserId,
                                        String title, String employer, DateTime startDate, DateTime endDate)
    {
        return rvConnection.succeed(getQualifiedName("SetJobExperience"), applicationId, jobId, userId,
                currentUserId, publicMethods.now(), title, employer, startDate, endDate);
    }

    public boolean setEducationalExperience(UUID applicationId, UUID educationId, UUID userId, UUID currentUserId,
                                            String school, String studyField, EducationalLevel degree,
                                            GraduateDegree level, DateTime startDate, DateTime endDate, boolean isSchool)
    {
        String strDegree = null, strLevel = null;
        if(degree != EducationalLevel.None) strDegree = degree.toString();
        if(level != GraduateDegree.None) strLevel = level.toString();

        return rvConnection.succeed(getQualifiedName("SetEducationalExperience"), applicationId, educationId,
                userId, currentUserId, publicMethods.now(), school, studyField, strDegree,
                strLevel, startDate, endDate, isSchool);
    }

    public boolean setHonorAndAward(UUID applicationId, UUID honorId, UUID userId, UUID currentUserId, String title,
                                    String occupation, String issuer, DateTime issueDate, String description)
    {
        return rvConnection.succeed(getQualifiedName("SetHonorAndAward"), applicationId, honorId, currentUserId,
                publicMethods.now(), title, occupation, issuer, issueDate, description);
    }

    public boolean setLanguage(UUID applicationId, UUID id, String languageName, UUID userId,
                                   UUID currentUserId, LanguageLevel langLevel)
    {
        String strLevel = null;
        if(langLevel != LanguageLevel.None) strLevel = langLevel.toString();

        return rvConnection.succeed(getQualifiedName("SetLanguage"), applicationId, id,
                languageName, userId, currentUserId, publicMethods.now(), strLevel);
    }

    public boolean removeJobExperience(UUID applicationId, UUID jobId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveJobExperience"), applicationId, jobId);
    }

    public boolean removeEducationalExperience(UUID applicationId, UUID educationId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveEducationalExperience"), applicationId, educationId);
    }

    public boolean removeHonorAndAward(UUID applicationId, UUID honorId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveHonorAndAward"), applicationId, honorId);
    }

    public boolean removeLanguage(UUID applicationId, UUID languageId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveLanguage"), applicationId, languageId);
    }

    /* end of Profile */

    /* User Groups */

    public boolean createUserGroup(UUID applicationId,
                                   UUID groupId, String title, String description, UUID currentUserId)
    {
        if(StringUtils.isBlank(title)) return false;

        return rvConnection.succeed(getQualifiedName("CreateUserGroup"),
                applicationId, groupId, title, description, currentUserId, publicMethods.now());
    }

    public boolean modifyUserGroup(UUID applicationId, UUID groupId,
                                   String title, String description, UUID currentUserId)
    {
        if(StringUtils.isBlank(title)) return false;

        return rvConnection.succeed(getQualifiedName("ModifyUserGroup"),
                applicationId, groupId, title, description, currentUserId, publicMethods.now());
    }

    public boolean removeUserGroup(UUID applicationId, UUID groupId, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveUserGroup"),
                applicationId, groupId, currentUserId, publicMethods.now());
    }

    public boolean addUserGroupMembers(UUID applicationId, UUID groupId, List<UUID> userIds, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("AddUserGroupMembers"), applicationId, groupId,
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ',',
                currentUserId, publicMethods.now());
    }

    public boolean addUserGroupMember(UUID applicationId, UUID groupId, UUID userId, UUID currentUserId) {
        List<UUID> ids = new ArrayList<UUID>() {{
            add(userId);
        }};

        return addUserGroupMembers(applicationId, groupId, ids, currentUserId);
    }

    public boolean removeUserGroupMembers(UUID applicationId, UUID groupId, List<UUID> userIds, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("RemoveUserGroupMembers"), applicationId, groupId,
                userIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ',',
                currentUserId, publicMethods.now());
    }

    public boolean removeUserGroupMember(UUID applicationId, UUID groupId, UUID userId, UUID currentUserId) {
        List<UUID> ids = new ArrayList<UUID>() {{
            add(userId);
        }};

        return removeUserGroupMembers(applicationId, groupId, ids, currentUserId);
    }

    public boolean setUserGroupPermission(UUID applicationId, UUID groupId, UUID roleId, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("SetUserGroupPermission"),
                applicationId, groupId, roleId, currentUserId, publicMethods.now());
    }

    public boolean unsetUserGroupPermission(UUID applicationId, UUID groupId, UUID roleId, UUID currentUserId)
    {
        return rvConnection.succeed(getQualifiedName("UnsetUserGroupPermission"),
                applicationId, groupId, roleId, currentUserId, publicMethods.now());
    }

    public List<UserGroup> getUserGroups(UUID applicationId, List<UUID> groupIds)
    {
        return parser.userGroups(rvConnection.read(getQualifiedName("GetUserGroups"), applicationId,
                groupIds.stream().map(UUID::toString).collect(Collectors.joining(",")), ','));
    }

    public List<UserGroup> getUserGroups(UUID applicationId)
    {
        return getUserGroups(applicationId, new ArrayList<>());
    }

    public UserGroup getUserGroup(UUID applicationId, UUID groupId) {
        List<UUID> ids = new ArrayList<UUID>() {{
            add(groupId);
        }};

        List<UserGroup> ret = getUserGroups(applicationId, ids);

        return ret.size() == 0 ? null : ret.get(0);
    }

    public List<User> getUserGroupMembers(UUID applicationId, UUID groupId)
    {
        return parser.users(rvConnection.read(getQualifiedName("GetUserGroupMembers"), applicationId, groupId));
    }

    public List<AccessRole> getUserGroupAccessRoles(UUID applicationId, UUID groupId)
    {
        return parser.accessRoles(rvConnection.read(getQualifiedName("GetUserGroupAccessRoles"),
                applicationId, groupId));
    }

    public List<AccessRoleName> checkUserGroupPermissions(UUID applicationId,
                                                                 UUID userId, List<AccessRoleName> permissions)
    {
        RVStructuredParam permissionsDT = new RVStructuredParam("StringTableType")
                .addColumnMetaData("Value", String.class);
        permissions.forEach(u ->{ if(u != AccessRoleName.None) permissionsDT.addRow(u.toString()); });

        return parser.permissions(rvConnection.getStringList(getQualifiedName("CheckUserGroupPermissions"),
                applicationId, userId, permissionsDT));
    }

    public List<AccessRole> getAccessRoles(UUID applicationId)
    {
        return parser.accessRoles(rvConnection.read(getQualifiedName("GetAccessRoles"), applicationId));
    }

    /* end of User Groups */
}